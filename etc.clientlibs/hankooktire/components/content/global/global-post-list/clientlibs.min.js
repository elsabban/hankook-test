/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
(() => {

;// CONCATENATED MODULE: external "Swiper"
const external_Swiper_namespaceObject = Swiper;
;// CONCATENATED MODULE: ./src/components/global/global-post-list/clientlibs/js/main.js
function main() {
  const $menu = $('.gpl-menu');
  const $select = document.getElementById('gpl-select');
  let menuText = 'all';
  let tagText = '';
  var $gplCateContainer = document.querySelector(".gpl-cate-container")
  var $gplCateTab = $gplCateContainer.querySelector(".cate-block-box")
  var $gplCateblur = $gplCateContainer.querySelector(".tab-block-blur")
  var $gplCateTabInner = document.querySelector(".tab-inner")
  var $gplContainer = document.querySelector(".gpl-container")
  var $gplMoreBtn = document.querySelector(".gpl-more-btn")

  var $headerHeight;
  var $outlink,
  isOutlink;
  var $selectType;
  var $gplTabWidth = 0,
    $gplTabGap;
  var $type;

  const initialNum = 16
  const addLength = 8
  var currentShow = initialNum  
  
  document.body.appendChild($select)
  changeTabmenu();
  showMoreList();
  mobSelectMenu();
  initScroll();
  selectTab()
  
  if(document.querySelector(".outlink[data-outlink]")) {
    $outlink = document.querySelector(".outlink[data-outlink]")
    isOutlink = true
  }

  if(document.getElementById("gpl-type-select")){
    $selectType = document.getElementById("gpl-type-select")
    setSortType()
  }
  
  window.addEventListener('resize', () => {
    requestAnimationFrame(setTab)
  }, false)
  setTab()  
  
  limitCountList();
  hideMoreBtn();
  noData();

  function selectTab(){
    var $cateString = new URLSearchParams(location.search).get("cate")

    if($cateString){
      $(".gpl-cate-container .btn-tab .cate").each(function(i){
        var $cataName = $(this).text().replaceAll(" ","").replaceAll("&","n").toLowerCase()

        if($cateString === $cataName){
          $(this).trigger("click")
          history.replaceState({}, null, location.pathname)
        }
      })
    }
  }

  function setTab() {
    sortTab();
    gridLayout($type);
    window.locomotive.update()


    /*if(isOutlink) 20220801 remove {
      $gplCateblur.style.right = $outlink.clientWidth + "px"
    } else {
      $gplCateblur.style.right = "0px"
    }*/
    /* 20220901 add */
    var landingGroup = document.querySelector('.landing-group');
    var windowWidth = $(window).width();
    if(windowWidth >= 767) {
      $gplCateblur.style.right = landingGroup.clientWidth + "px"
    } else {
      $gplCateblur.style.right = "0px"
    }
    /* //20220901 add */

    $gplTabWidth = 0
    $gplTabGap = $(".gpl .btn-tab").css("margin-right").replace("px","")

    $(".gpl .tab-inner .btn-tab").each(function(){
      $gplTabWidth += $(this).width()
    })
    
    $gplCateTabInner.style.width = $gplTabWidth + $gplTabGap * ($(".gpl .btn-tab").length + 1) + "px"

    if($gplCateTab.clientWidth < $gplCateTabInner.clientWidth){
      $gplCateTab.classList.add("over")
    }else{
      $gplCateTab.classList.remove("over")
    }

    if($selectType){
      if($gplCateTabInner.clientWidth + $selectType.clientWidth >= $gplCateContainer.clientWidth){
        $gplCateContainer.classList.add("over")
      }else{
        $gplCateContainer.classList.remove("over")
      }
    }
  }
  
  function changeTabmenu() {
    $('.gpl-cate-container button.cateTap.cateTap').on('click', function () {
      const self = $(this);
      const tabIndex = $('.gpl-cate-container button.cateTap.cateTap').index($(this));
      if ($(this).hasClass('active')) return;
      if ($(this).hasClass('outlink')){
        location.href =  $(this).data("outlink")
        return
      }

      // 22.03.11 탭과 셀렉트 박스 동기화
      const $currentBtn = document.querySelector('#gpl-select .select-box > .btn');
      const keyName = $(this)[0].innerText;
      const $selectedItem = document.querySelector(`#gpl-select .drop-box button[data-case="${keyName}"]`)
      $currentBtn.textContent = $selectedItem ? $selectedItem.textContent : 'All';
      
      if(document.getElementById("gpl-type-select")){
        initialSortType()
      }

      menuText = self.data('case') ? self.data('case') : self.find(".cate").text().toLowerCase();
      $('.gpl-list__item').addClass('hidden');
      
      $('.gpl-cate-container button.cateTap').removeClass('active');
      $(this).addClass('active');

      
      sortTab();
      limitCountList();
      noData();

      hideMoreBtn()

      window.locomotive.scrollTo('[data-scroll-container]',{
        callback: function(){
          window.locomotive.update()
        }
      })

      $('#gpl-select .drop-box button').eq(tabIndex).addClass('active').siblings().removeClass('active');

    })
  }

  function mobSelectMenu() {
    $('#gpl-select .drop-box button').on('click', function(e) {
      $(this).addClass('active').siblings().removeClass('active')
      const idx = $(this).index();
      $('.gpl-cate-container .tab-inner button').eq(idx).trigger('click');
    })
  }

  function initScroll() {
    window.locomotive.on('scroll', function() {
      $headerHeight = document.querySelector("header").clientHeight

      if($gplContainer.getBoundingClientRect().top < 0){
        if ($('#header').hasClass('up')) $select.style.paddingTop = $headerHeight + 20 + "px"
        else $select.style.paddingTop = "20px"
        $select.classList.add('is-active');
      }else{
        $select.classList.remove("is-active")
      }
    })
  }
  
  function limitCountList() {
    $('.gpl-list__item.current').each(function (i) {
      if (i >= currentShow) {
        $(this).addClass('hidden');
      }else{
        $(this).removeClass('hidden');
      }
    })

    gridLayout($type);
    window.locomotive.update()
  }

  function hideMoreBtn(){
    if($('.gpl-list__item.current:not(.hidden)').length <= 0){
      $gplMoreBtn.style.display = 'none'
      return
    }
    if($('.gpl-list__item.current:not(.hidden)').length <= currentShow && $('.gpl-list__item.current').length <= currentShow){
      $gplMoreBtn.style.display = 'none'
    }else{
      $gplMoreBtn.style.display = 'flex'
    }
  }

  function showMoreList() {
    $('.gpl-list .btn').on('click', function () {
      currentShow += addLength

      limitCountList()

      hideMoreBtn()
      gridLayout($type);
      window.locomotive.update()
    })
  }

  function sortTab() {
    currentShow = initialNum
    $('.gpl-list__item').removeClass('current')

    $('.gpl-list .tags').each(function(){
      $(this).find('li').each(function(){
        tagText = $(this).text().replace('#', '').toLowerCase();
        

        if (menuText === 'all') {
          $('.gpl-list__item').removeClass('hidden').addClass("current");
        } else if (menuText === tagText) {
          $(this).closest('.gpl-list__item').removeClass('hidden').addClass("current");
        }
      })
    })

  }

  function initialSortType(){
    if($selectType) {
      $selectType.querySelectorAll(".drop-box button")[0].click()
      $type = 'all'
    }
  }
  
  function setSortType(){
    $selectType.querySelectorAll(".drop-box button").forEach(function(el){
      el.removeEventListener("click",function(){})
      el.addEventListener("click",function(){
        $type = el.dataset.case.toLowerCase()
        $selectType.querySelector(".base").dataset.case = $type

        if ($type === 'all') {
          $('.gpl-list__item:not(.hidden)').removeClass('type-hidden')

          gridLayout($type)
          noData(true)
          return
        } else{
          $('.gpl-list__item:not(.hidden)').addClass('type-hidden')
          $('.gpl-list__item:not(.hidden)[data-post-type='+ $type + ']').removeClass('type-hidden')
          gridLayout($type)
          noData(true)
        }
      })
    })   
  }

  function gridLayout($type) {
    if(!$type || $type == 'all'){
      $type = ''
    }else{
      $type = '[data-post-type='+ $type + ']'
    }

    $('.gpl-list__item').removeClass('sm');
    $('.gpl-list__item' + $type + ':not(.hidden)').each(function (i) {
      
      if (window.innerWidth < 767) {
        if (i !== 0) {
          $(this).addClass('sm')
        }
      } else {
        if (i % 8 === 2 || i % 8 === 3 || i % 8 === 4 || i % 8 === 5 || i % 8 === 6 || i % 8 === 7 || i % 8 === 8) {
          $(this).addClass('sm')
        }
      }
    })
  }

  function noData(type) {
    if(type){
      if ($('.gpl-list__item:not(.hidden)').length - $('.gpl-list__item:not(.type-hidden)').length <= 0) {
        $('.gpl-list .no_data').addClass('is-active');
        $menu.css('transform', `translateY(0)`);
        // $('.gpl-list .btn').css('display', 'none');
        return
      } else {
        $('.gpl-list .no_data').removeClass('is-active');
        // $('.gpl-list .btn').css('display', 'block');
        return
      }
    }
    if ($('.gpl-list__item:not(.hidden)').length <= 0) {
      $('.gpl-list .no_data').addClass('is-active');
      $menu.css('transform', `translateY(0)`);
      // $('.gpl-list .btn').css('display', 'none');
    } else {
      $('.gpl-list .no_data').removeClass('is-active');
      // $('.gpl-list .btn').css('display', 'block');
    }
  }
}
window.addEventListener('compFuncRun', main);
})();

// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
(() => {
// extracted by mini-css-extract-plugin

})();

/******/ })()
;
$(document).ready(function(){
	var _miuCateUrl = $("#miuCateUrl").attr("href");
    $("#btnMiuCateUrl").attr("data-outlink", _miuCateUrl);
	
	var _madeInUrl = $("#madeInUrl").attr("href");
    $("#btnMadeInUrl").attr("data-outlink", _madeInUrl);

});
