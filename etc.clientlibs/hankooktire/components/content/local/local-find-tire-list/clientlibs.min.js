/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
(() => {
function main() {
  const root = document.querySelector('.lftl');
  const lftlFilter = document.querySelector('.lftl__filter');
  const filter = lftlFilter.querySelector('.filter');
  const groupHeads = root.querySelectorAll('.group-head');
  const btnShowFilter = document.querySelector('.lftl .btn-show-filter');
  const btnHideFilter = document.querySelector('.lftl .btn-hide-filter');
  const btnCloseFilter = document.getElementById('btn-close-filter');
  const utilFindTire = document.getElementById('util-find-tire');

  groupHeads.forEach(el => {

    el.addEventListener('click', function() {
      this.classList.toggle('is-hide');

      const parent = this.parentNode;
      const items = parent.querySelector('.filter__items');

      if(this.classList.contains('is-hide')) {
        
        items.style.marginTop = -items.clientHeight + 'px';

      } else {
        items.style.marginTop = 0;
      }
    })
  });

  btnShowFilter.addEventListener('click', function(e) {
    openFilter();

    e.preventDefault();
    e.stopPropagation();
  })

  const closeButtons = [btnHideFilter, btnCloseFilter]
  closeButtons.forEach(btn => {
    btn.addEventListener('click', function(e) {
      closeFilter();
  
      e.preventDefault();
      e.stopPropagation();
    })
  })

  function openFilter() {
    window.disableBodyScroll(lftlFilter.querySelector('.filter__content'));
    utilFindTire && utilFindTire.classList.add('hidden');
    document.querySelector('.lftl__filter').classList.toggle('is-show');
    window.locomotive && window.locomotive.stop();
  }

  function closeFilter() {
    window.enableBodyScroll(lftlFilter.querySelector('.filter__content'));
    utilFindTire && utilFindTire.classList.remove('hidden');
    document.querySelector('.lftl__filter').classList.toggle('is-show');
    window.locomotive && window.locomotive.start();
  }
}
window.addEventListener('compFuncRun', main);
})();

// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
// extracted by mini-css-extract-plugin

})();

/******/ })()
;
$(document).ready(function(){
    
    const table = $(".section--full").data("table");
    const resultList = $(".lftl__wrap").data("result-list");
    const paramSearchType= URLSearch.get("searchType");
    if(paramSearchType == VEHICLE_SEARCHTYPE || paramSearchType == TIRESIZE_SEARCHTYPE || paramSearchType == TBR_SEARCHTYPE) {
        //$(".tag-wrap .tags").html($(".tag-wrap .tags").html().replaceAll(noChoice, ""));
        $(".tag-wrap .tag").each(function(){
            if($(this).text() == noChoice) {
                $(this).remove();
            }
        })
    }
    
    //if(table == "PCR")
    populateFilter(resultList,"");
    
    populateResult(resultList);
    populatePage();
    goPage(1);
    $(".btn--refresh").on("click", function(){
        $(".search-panel").removeClass('hide');
    });

    $(".decrease-end").on("click", function(){
        goPage(1);
        window.locomotive.scrollTo(0)
    });

    $(".decrease-by1").on("click", function(){
        goPage(eval($(".page-num.is-active").children("span").text()) - 1);
        window.locomotive.scrollTo(0);
    });

    $(".increase-by1").on("click", function(){
        goPage(eval($(".page-num.is-active").children("span").text()) + 1);
        window.locomotive.scrollTo(0);
    });

    $(".increase-end").on("click", function(){
        goPage($(".tire-items").length);
        window.locomotive.scrollTo(0);
    });

    $(".filter").on("reset", function(){
        $(".lftl .font_headline_3 > span").text(resultList.length);
        populateResult(resultList);
        populateFilter(resultList,"");
        populatePage();
        goPage(1);
        
    });

});
function getExtractedDataForTbr(resultList) {
    return resultList.filter(function (obj, i) {
            let b = $("input[name='TBR_SVRTY_CD']:checked").length == 0 ? true :false;
            $("input[name='TBR_SVRTY_CD']:checked").each(function() {
                if (obj.TBR_SVRTY_CD ==  $(this).val()) {
                    b = true;
                    return;
                } 
            });
            return  b && 
                    ($("input[name='TBR_LOC_CD']:checked").length == 0 || obj.TBR_LOC_CD == $("input[name='TBR_LOC_CD']:checked").val()) &&
                    ($("input[name='ZMS_YN']:checked").length == 0 || obj.ZMS_YN == $("input[name='ZMS_YN']:checked").val()) &&
                    ($("input[name='SNOW_YN']:checked").length == 0 || obj.SNOW_YN == $("input[name='SNOW_YN']:checked").val());
            //return filterChecked(obj, "PCR_VCLE_TYPES") && filterChecked(obj, "SESN_CD");
        });
}
function getAddtionalDataForTbr(resultList) {
    return resultList.filter(function (obj, i) {
            let b = $("input[name='TBR_SVRTY_CD']:checked").length == 0 ? true :false;
            $("input[name='TBR_SVRTY_CD']:checked").each(function() {
                if (obj.TBR_SVRTY_CD ==  $(this).val()) {
                    b = true;
                    return;
                } 
            });
            return  b && 
                    ($("input[name='TBR_LOC_CD']:checked").length != 0 && $("input[name='TBR_LOC_CD']:checked").val() != "A" && obj.TBR_LOC_CD == "A") &&
                    ($("input[name='ZMS_YN']:checked").length == 0 || obj.ZMS_YN == $("input[name='ZMS_YN']:checked").val()) &&
                    ($("input[name='SNOW_YN']:checked").length == 0 || obj.SNOW_YN == $("input[name='SNOW_YN']:checked").val());
            //return filterChecked(obj, "PCR_VCLE_TYPES") && filterChecked(obj, "SESN_CD");
        });
}
function getExtractedDataForPcr(resultList) {
    return resultList.filter(function (obj, i) {
            let b = $("input[name='PCR_VCLE_TYPES']:checked").length == 0 ? true :false;
            $("input[name='PCR_VCLE_TYPES']:checked").each(function() {
                if (obj.PCR_VCLE_TYPES != null && obj.PCR_VCLE_TYPES.includes($(this).val())) {
                    b = true;
                    return;
                } 
            });
            return  b && 
                    ($("input[name='SESN_CD']:checked").length == 0 || obj.SESN_CD == $("input[name='SESN_CD']:checked").val()) &&
                    ($("input[name='BRND_NM']:checked").length == 0 || obj.BRND_NM == $("input[name='BRND_NM']:checked").val()) &&
                    ($("input[name='RFLT_YN']:checked").length == 0 || obj.RFLT_YN == $("input[name='RFLT_YN']:checked").val()) &&
                    ($("input[name='SEALANT_YN']:checked").length == 0 || obj.SEALANT_YN == $("input[name='SEALANT_YN']:checked").val()) &&
                    ($("input[name='FOAM_YN']:checked").length == 0 || obj.FOAM_YN == $("input[name='FOAM_YN']:checked").val()) &&
                    ($("input[name='ZMS_YN']:checked").length == 0 || obj.ZMS_YN == $("input[name='ZMS_YN']:checked").val()) &&
                    ($("input[name='SNOW_YN']:checked").length == 0 || obj.SNOW_YN == $("input[name='SNOW_YN']:checked").val());
            //return filterChecked(obj, "PCR_VCLE_TYPES") && filterChecked(obj, "SESN_CD");
        });
}
function populateFilter(resultList, chkVal) {
    const arrVhcl = new Array();
    const arrSesn = new Array();
    const arrBrnd = new Array();
    const arrSvrty = new Array();
    const arrLoc = new Array();
    const arrFtr = new Array();
    const arrFnc = new Array();
    const arrNs = new Array();
   $.each(resultList, function(idx, data) {
        // Vehicle Filter Data
         if(resultList[idx].PCR_VCLE_TYPES != null) {
            const t =data.PCR_VCLE_TYPES.split(","); 
            const r =data.PCR_VCLE_TYPES_NM.split(","); 
            $.each(t, function(ti, tData) {
                const objVhcl = new Object();
                objVhcl.id = "PCR_VCLE_TYPES";
                objVhcl.value = tData;
                objVhcl.text = r[ti];
                arrVhcl.push(objVhcl);
            });
            
        }             
        // Season Filter Data
        if(resultList[idx].SESN_CD != null) {
            const objSesn = new Object();
            objSesn.id = "SESN_CD";
            objSesn.value = resultList[idx].SESN_CD;
            objSesn.text = resultList[idx].SESN_CD_NM;
            arrSesn.push(objSesn);
        }

        // Brand Filter Data
        if(resultList[idx].BRND_NM != null) {
            const objBrnd = new Object();
            objBrnd.id = "BRND_NM";
            objBrnd.value = resultList[idx].BRND_NM.replace(/\'/g,"&#39;");
            objBrnd.text = resultList[idx].BRND_NM;
            arrBrnd.push(objBrnd);
        }

        if(resultList[idx].TBR_SVRTY_CD != null) {
            const objSvrty = new Object();
            objSvrty.id = "TBR_SVRTY_CD";
            objSvrty.value = resultList[idx].TBR_SVRTY_CD;
            objSvrty.text = resultList[idx].TBR_SVRTY_NM;
            arrSvrty.push(objSvrty);
        }

        if(resultList[idx].TBR_LOC_CD != null) {
            const objLoc = new Object();
            objLoc.id = "TBR_LOC_CD";
            objLoc.value = resultList[idx].TBR_LOC_CD;
            objLoc.text = resultList[idx].TBR_LOC_NM;
            arrLoc.push(objLoc);
        }
 
        if(resultList[idx].ZMS_YN == "Y") {
            const objZms = new Object();
            objZms.id = "ZMS_YN";
            objZms.value = resultList[idx].ZMS_YN;
            objZms.text = $(".search-panel").data("zms-label");
            arrFtr.push(objZms);
        }
        
        if(resultList[idx].SNOW_YN == "Y") {
            const objSnow = new Object();
            objSnow.id = "SNOW_YN";
            objSnow.value = resultList[idx].SNOW_YN;
            objSnow.text = $(".search-panel").data("snow-label");
            arrFtr.push(objSnow);
        }

        if(resultList[idx].RFLT_YN == "Y") {
            const objRflt = new Object();
            objRflt.id = "RFLT_YN";
            objRflt.value = resultList[idx].RFLT_YN;
            objRflt.text = $(".search-panel").data("runflat-label");
            arrFnc.push(objRflt);
        }

        if(resultList[idx].SEALANT_YN == "Y") {
            const objSlnt = new Object();
            objSlnt.id = "SEALANT_YN";
            objSlnt.value = resultList[idx].SEALANT_YN;
            objSlnt.text = $(".search-panel").data("sealant-label");
            arrFnc.push(objSlnt);
        }

        if(resultList[idx].FOAM_YN == "Y") {
            const objFrm = new Object();
            objFrm.id = "FOAM_YN";
            objFrm.value = resultList[idx].FOAM_YN;
            objFrm.text = $(".search-panel").data("foam-label");;
            arrNs.push(objFrm);
        }
   });
    populateFilterItems($("#fltVHCL"), arrVhcl, chkVal);
    populateFilterItems($("#fltSESN"), arrSesn, chkVal);
    populateFilterItems($("#fltBRND"), arrBrnd, chkVal);
    populateFilterItems($("#fltAPP"), arrSvrty, chkVal);
    populateFilterItems($("#fltPOS"), arrLoc, chkVal);
    populateFilterItems($("#fltFTR"), arrFtr, chkVal);
    populateFilterItems($("#fltFNC"), arrFnc, chkVal);
    populateFilterItems($("#fltNS"), arrNs, chkVal);
    
}
function  populateFilterItems(target, arr, chkVal) {
    //console.log(JSON.stringify(arr));

    if(arr == null || arr.length == 0) {
        target.hide();
        return;
    } else {
        target.show();
    }
    // 중보제거
    const arrUnique = arr.filter(function(obj, i) {
        return arr.findIndex(function(obj1, i1) {
            if(obj.id == "ZMS_YN" || obj.id == "SNOW_YN" || obj.id == "RFLT_YN" || obj.id == "SEALANT_YN" || obj.id == "FOAM_YN") {
                return obj.id !=null && obj.id == obj1.id; 
            }
            else {
                return obj.value !=null && obj.value == obj1.value; 
            }
            
        }) == i;
    });
    
    //console.log(JSON.stringify(arrUnique));
//    console.log(target.html());
    target.find(".filter__items").remove();
    target.children(".group-wrap").append("<div class='filter__items'></div>");
    $.each(arrUnique, function(idx, data) {
        let span = "<span class='checkbox input-block'> <input type='checkbox' id='" + data.id + "_" + data.value + "' value = '" + data.value + "' name='" + data.id +"'";
        //if(data.id + "_" + data.value == chkVal) {
        if(chkVal.indexOf(data.id + "_" + data.value) > -1) {
            span += "checked";
        }
        span += ">";
        span = span + "<label for='" + data.id + "_" + data.value + "'><span>" + data.text + "</span></label></span>";   
        target.children(".group-wrap").children().append(span);
       
    });
    
    $(".filter__list input:checkbox").off("click").on("click", function(){
        const table = $(".lftl > .section--full").data("table");
        const resultList = $(".lftl__wrap").data("result-list");
        let selResult;
        let chkVal = [];
        $(".lftl__filter").find("input:checkbox:checked").each(function(i, item){
            chkVal.push($(this).attr("id"));
        });
        if(table == "PCR")  {
            selResult =  getExtractedDataForPcr(resultList);
            //populatePCRFilter(selResult, chkVal);
        }
        else if(table == "TBR"){
            selResult =  getExtractedDataForTbr(resultList);
            // position 선택값에 관계없이 A 를 항상 추가하던 로직 제거
            //selResult = selResult.concat(getAddtionalDataForTbr(resultList));
        }  
        populateFilter(selResult, chkVal);
        $(".lftl .font_headline_3 > span").text(selResult.length);
        populateResult(selResult);
        populatePage();
        goPage(1);
        //console.log( $(this).val() +  " = " + $(this).is(":checked"));
    });    


}
function populateResult(resultList) {
    $(".lftl__results > ul").remove();
    $(".lftl__results > .no-box").remove();
    const target = $(".func");
    let tryAgainLabel = $('[data-tryAgainLabel]').attr('data-tryAgainLabel');
    let html = "";
    if(resultList.length == 0) {
         html += "<div class='no-box'><p class='font_body_1_main'>"+ tryAgainLabel + "</p></div>";
         target.css("display", "none");
    } else {
        $.each(resultList, function(idx, data) {
            if(idx % 6 == 0) {
                html += "<ul class='tire-items lftl__items'>";
            }
            html += "<li class='tire-item'>";
            html += populateProduct(data, data.TYPE);
            html += "</li>";
            
             if(idx % 6 == 5) {
                html += "</ul>";
            }
        });
        target.css("display", "block");
    }
    target.before(html);
    
}
function populatePage() {
    $(".paging-box > .page-num").remove();
    
    const totalPage = $(".tire-items").length;
    for(let i = 1 ; i <= totalPage  ; i++) {
        $(".increase-by1").before("<a href='#' class='page-num'><span>" + i + "</span></a>");
    }
    
    $(".page-num").on("click", function(){
      
        goPage($(this).children("span").text());
        window.locomotive.scrollTo(0)
    });
}
function goPage(page) {
    const totalPage = $(".tire-items").length;
    for(let i = 0 ; i < totalPage ; i++) {
        if(i == page -1) {
            $(".tire-items").eq(i).css("display", "flex");
            $(".page-num").eq(i).addClass("is-active");
        }
        else {
            $(".tire-items").eq(i).css("display", "none");
            $(".page-num").eq(i).removeClass("is-active");
        }
        
        if (i == totalPage -1) {
            $(".page-num").eq(i).addClass("last-num");
        }
    }
    if(totalPage == 1) {
        $(".decrease-end").addClass("disabled");
        $(".decrease-by1").addClass("disabled");
        $(".increase-by1").addClass("disabled");
        $(".increase-end").addClass("disabled");
    }
    else if (page == 1) {
        $(".decrease-end").addClass("disabled");
        $(".decrease-by1").addClass("disabled");
        $(".increase-by1").removeClass("disabled");
        $(".increase-end").removeClass("disabled");
   } else if (page == totalPage) {
        $(".decrease-end").removeClass("disabled");
        $(".decrease-by1").removeClass("disabled");
        $(".increase-by1").addClass("disabled");
        $(".increase-end").addClass("disabled");
    }
    else {
        $(".decrease-end").removeClass("disabled");
        $(".decrease-by1").removeClass("disabled");
        $(".increase-by1").removeClass("disabled");
        $(".increase-end").removeClass("disabled");
     }
     

}
