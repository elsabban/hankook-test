const VEHICLE_SEARCHTYPE = "V";
const TIRESIZE_SEARCHTYPE = "T";
const TBR_SEARCHTYPE = "B";
const VEHICLE_URL_PREFIX ="/wsvc/api/findTires.Vehicle.";
const TIRESIZE_URL_PREFIX ='/wsvc/api/findTires.TireSize.';
const TBR_URL_PREFIX ='/wsvc/api/findTires.Tbr.';
const URL_POSTFIX = ".do";
const CONDITIONS = $(".search-content").data("conditions-string");
const URLSearch = new URLSearchParams(location.search);
const noChoice = $(".search-panel").data("nochoice-label");
const noData = $(".search-panel").data("nodata-label");
const newLabel = $(".search-panel").data("new-label");
const testIcon = $(".search-panel").data("testresult-icon");
const testHover = $(".search-panel").data("testresult-hover");
const awardIcon = $(".search-panel").data("award-icon");
const awardHover = $(".search-panel").data("award-hover");
const runMode = $(".search-panel").data("runmode");
const isPublish = $(".search-panel").data("ispublish");


$(document).ready(function(){
    const paramSearchType= URLSearch.get("searchType");
    
    $("#byTireSize").on("click", function(){
        $(".search-panel .title-w.vehicle").hide();
        $(".search-panel .title-w.size").show(); 
        changeSearchType(TIRESIZE_SEARCHTYPE, CONDITIONS.ByTireSize);
        if(paramSearchType != null && paramSearchType == TIRESIZE_SEARCHTYPE && URLSearch.get("options") != null) {
            for(let i = 0; i < URLSearch.get("options").split(",").length; i++) {
                if( CONDITIONS.ByTireSize[i].value != null){
                    const conditionList = getConditionItems(paramSearchType, CONDITIONS.ByTireSize[i].condition);
                    populuateDropBox(paramSearchType, i, CONDITIONS.ByTireSize[i].condition, conditionList);
                }else{
                    const conditionList = paramSearchType(paramSearchType, CONDITIONS.ByTireSize[i+1].condition);
                    populuateDropBox(searchType, i, CONDITIONS.ByTireSize[i+1].condition, conditionList);
                    break;
                }
            }
            initResult(false);
        } else {
            const conditionList = getConditionItems(TIRESIZE_SEARCHTYPE, CONDITIONS.ByTireSize[0].condition);
            populuateDropBox(TIRESIZE_SEARCHTYPE, 0, CONDITIONS.ByTireSize[0].condition, conditionList);
            initResult(true);
        }
      
   });
   
   $("#byVehicle").on("click", function(){
        $(".search-panel .title-w.vehicle").show();
        $(".search-panel .title-w.size").hide(); 
        $("#searchConditions [name='searchType']").val(VEHICLE_SEARCHTYPE);
        changeSearchType(VEHICLE_SEARCHTYPE, CONDITIONS.ByVehicle);
        if(paramSearchType != null && paramSearchType == VEHICLE_SEARCHTYPE && URLSearch.get("options") != null) {
            JSON.parse(URLSearch.get("options")).forEach(function(opt, i){
                if( CONDITIONS.ByVehicle[i].value != null){
                    const conditionList = getConditionItems(paramSearchType, CONDITIONS.ByVehicle[i].condition);
                    populuateDropBox(paramSearchType, i, CONDITIONS.ByVehicle[i].condition, conditionList);
                }else{
                    const conditionList = getConditionItems(paramSearchType, CONDITIONS.ByVehicle[i+1].condition);
                    populuateDropBox(paramSearchType, i, CONDITIONS.ByVehicle[i+1].condition, conditionList);
                }
            });
            initResult(false);
        } else {
            const conditionList = getConditionItems(VEHICLE_SEARCHTYPE, CONDITIONS.ByVehicle[0].condition);
            populuateDropBox(VEHICLE_SEARCHTYPE, 0, CONDITIONS.ByVehicle[0].condition, conditionList);
            initResult(true);
        }
   });
   
   $(".search-panel .btn-del_options").on("click", function(){
        const searchType = $("#searchConditions [name='searchType']").val();

        if(searchType == TBR_SEARCHTYPE) {
             removeSelect(searchType, 0, CONDITIONS.TBR.length-1);
        }
        else {
            const firstCondition = $("#carSub > .select-vehicle").find(".select-box").eq(0).children(".btn").attr("id");
            const firstConditionList = getConditionItems(searchType, firstCondition); 
            const conditionCount = $("#carSub > .select-vehicle").find(".select-box").length;
            removeSelect(searchType, 0, conditionCount-1);
            populuateDropBox(searchType, 0, firstCondition, firstConditionList);
        }
        refreshOptions();
        initResult(true);
   });
   
   $(".search-panel .view-all > a").on("click", function(){
        if($(".select-result .title").html() == $("#defaultTitle4").html()) return false;
        const searchType = $("#searchConditions [name='searchType']").val();
        const options = [];
        $(".options").children("span").each(function(idx){
            if(searchType == TBR_SEARCHTYPE && idx == 0 ) {
                const tmpOpt = [];
                $(this).children("p").each(function(){
                    tmpOpt.push($(this).text());
                })
                options.push(tmpOpt);
                
            } else {
                options.push($(this).text() == ""? noChoice : $(this).text());
                
            }  
        });
        $("#searchConditions [name='options']").val(JSON.stringify(options));
        //$("#searchConditions").attr("method", "POST");
        $("#searchConditions").submit();
    });

    $("#tabPcr").on("click", function(){
        $("#searchConditions [name='searchType']").val(VEHICLE_SEARCHTYPE);
        $("#byVehicle").trigger("click");
    });
    
    $("#tabTbr").on("click", function(){
        $("#searchConditions [name='searchType']").val(TBR_SEARCHTYPE);
            populateOptions(CONDITIONS.TBR);
        if(paramSearchType != null && paramSearchType == TBR_SEARCHTYPE && URLSearch.get("options") != null) {
            applyTbrParam(CONDITIONS.TBR);
            initResult(false);
        }
        else {
            initResult(true);
        }
    });
    
    $(".select-wrapper > .select-tire .btn").on("click", function(){
        const searchType = $("#searchConditions [name='searchType']").val();
        removeSelect(searchType, 2, 3);
        initResult(true);
        setFormData("LOC", $(this).val());
        refreshOptions(searchType, CONDITIONS.TBR);
        const conditionList = getConditionItems(searchType, "SectWdth");
        populuateDropBox(searchType, 0,"SectWdth",conditionList);
    });
        
     $("#truckBus > .select-tire .btn").on("click", function(){
        const searchType = $("#searchConditions [name='searchType']").val(); 
        const value = $(this).val();
        //클릭안된것 클릭
        if ($(this).hasClass("active")) {
            setFormData("SVRTY", value);
        }
        //클릭 된것 클릭.
        else {
            const t = $("#searchConditions [name='svrtyCd']").val().split(",");
            setFormData("SVRTY", "");
            $.each(t,function(i, d) {
                if (d != value) { 
                    setFormData("SVRTY", d);
                }
            });
        }
        //다른 셀렉트값 있을때 다시 검색하려고. 여기다가 초기화 하면 될듯.
        //if($("#searchConditions [name='locCd']").val() != "" 
        //    && $("#searchConditions [name='sectWdth']").val() != "" 
            //&& $("#searchConditions [name='inch']").val() != ""
         //    ) {
            //populateSearchResult($("#searchConditions [name='searchType']").val());
            removeSelect(searchType, 1, 3);
            initResult(true);
            
        //}
        refreshOptions(searchType, CONDITIONS.TBR);
      });
 
    if(paramSearchType == TBR_SEARCHTYPE) {
        $("#tabTbr").trigger("click");
    }else if(paramSearchType == TIRESIZE_SEARCHTYPE) {
        $("#byTireSize").trigger("click");
    } else {
        $("#byVehicle").trigger("click");
    }
    
}); 

/*
 * 검색 결과 리스트에서 find tire의 검색 데이터 적용
 */
function applyTbrParam(conditions) {
    $("#truckBus > .select-tire .btn").filter(function() {
        return conditions[0].value.includes($(this).attr("value"));
    }).addClass("active");
    $(".select-wrapper > .select-tire .btn").filter(function() {
        return conditions[1].value == $(this).attr("value");
    }).addClass("active");

    for(let i = 0; i <conditions.length; i++) {
        if(i > 1 && conditions[i].value != null && conditions[i].value != ""){
            const selectBtn = $(".select-wrapper .con .select-box").eq(i-2).children("button");
            selectBtn.attr("value", conditions[i].value);
            selectBtn.text(conditions[i].text);
            selectBtn.addClass("selected")
            const conditionList = getConditionItems(TBR_SEARCHTYPE, conditions[i].condition);
            populuateDropBox(TBR_SEARCHTYPE, i-2,conditions[i].condition,conditionList);
        }
        setFormData( conditions[i].condition, conditions[i].value);
    }

}
function refreshOptions(searchType, conditionsCount) {
    let optionsDisp = false;
    if (searchType == TBR_SEARCHTYPE) {
        let span0 = "";
        $.each($("#truckBus >.select-tire .btn.active"), function(i, item){
            span0 = span0 + "<p>" + $(item).text() + "</p>";
            optionsDisp = true;
        });
        $(".options > span").eq(0).html(span0);
        
        let span1 = $("#truckBus >.select-wrapper .btn.active").text();
        if(span1 != "") {
            $(".options > span").eq(1).text(span1); 
            optionsDisp = true;  
        } else {
            $(".options > span").eq(1).text(""); 
        }
        $(".options > span").eq(1).text(span1);

        for(let i = 2; i <= 3 ;i++) {
            const text = $("#truckBus .btn.selected").eq(i-2).text();
            if(text != "") {
                $(".options > span").eq(i).text(text); 
                optionsDisp = true;  
            } else {
                $(".options > span").eq(i).text(""); 
            }
        }
        
    }
    else { // PCR
        for(let i = 0; i < conditionsCount ;i++) {
            const text = $("#carSub .btn.selected").eq(i).text();
            if(text != "" && text != "No choice") {
                $(".options > span").eq(i).text(text); 
                optionsDisp = true;  
            } else {
                $(".options > span").eq(i).text(""); 
            }
        }
    }
    if(optionsDisp == false) {
        $(".selected-options").css("display", "none");
    } else {
        $(".selected-options").css("display", "block");
    }
}

/*
    Select box의 option data를 위한 Servlet 호출
*/
function getConditionItems(searchType, condition) {
    let url = "";
    if (searchType == VEHICLE_SEARCHTYPE)
        url = VEHICLE_URL_PREFIX + condition + URL_POSTFIX;
    else if (searchType == TIRESIZE_SEARCHTYPE)
        url = TIRESIZE_URL_PREFIX + condition + URL_POSTFIX;
    else if (searchType == TBR_SEARCHTYPE)
        url = TBR_URL_PREFIX + condition + URL_POSTFIX;
    else return;
    let conditionItems;
    // $.ajax({
    //         type: "POST",
    //         url: url,
    //         data : $("#searchConditions").serialize(),
    //         async: false,
    //         success: function(data) {
    //             // returnCode logic 
    //             if ("0000" == data.resultCode) {
    //                 conditionItems = data.data;
    //            }
    //            else {
    //             console.log(data.message);
    //             }
    //         },
    //         error : function(){
    //             console.log('ajax Error');
    //         }
    // });
   return conditionItems;
};

/*
    dropbox 동적 생성
*/
function populuateDropBox(searchType, index, dataName, dataList) {
    let target;
    if($("#searchConditions [name='searchType']").val() == TBR_SEARCHTYPE) {
        target = $("#truckBus .select-box").eq(index).children(".drop-box");
   }
    else {
        target = $("#carSub > .select-vehicle").find(".select-box").eq(index).children(".drop-box");
    }
    // drop-box 초기화
    target.children().remove();
    
    if(dataList == "") {
        target.append("<button value='' >" + noData + "</button>");
    }
    
    $(dataList).each(function() {
        if(dataName.toUpperCase() == "BRAND") { 
            var button = "<button value='" + this.MNF_SEQ +"'>"+ this.MNF_NM + "</button>";
        }
        else if(dataName.toUpperCase() == "MODEL") { 
            var button = "<button value='" + this.MNF_VCLE_SEQ +"'>"+ this.VCLE_NM + "</button>";
        }
        else if(dataName.toUpperCase() == "RELEASEYEAR") { 
            var button = "<button value='" + this.RELEASE_YEAR +"'>"+ ((this.RELEASE_YEAR == "noSel") ? noChoice : this.RELEASE_YEAR) + "</button>";
        }
        else if(dataName.toUpperCase() == "MOTOR") { 
            var button = "<button value='" + this.MOTOR +"'>"+ ((this.MOTOR == "noSel") ? noChoice : this.MOTOR) + "</button>";
        }
        else if(dataName.toUpperCase() == "VERSION") { 
            var button = "<button value='" + this.VERSION +"'>"+ ((this.VERSION == "noSel") ? noChoice : this.VERSION) + "</button>";
        }
        else if(dataName.toUpperCase() == "SIZE") { 
            var button = "<button value='" + this.FRONT_SZ + '|' + this.REAR_SZ +"'>" +((this.FRONT_SZ == "noSel" && this.REAR_SZ =="noSel" ) ? noChoice : this.FRONT_SZ ) + "</button>";
        }
        else if(dataName.toUpperCase() == "SECTWDTH") { 
             var button = "<button value='" + this.SECT_WDTH +"'>"+  this.SECT_WDTH + "</button>";
        }
        else if(dataName.toUpperCase() == "FR") { 
             var button = "<button value='" + this.FR +"'>"+  this.FR + "</button>";
        }
        else if(dataName.toUpperCase() == "INCH") { 
             var button = "<button value='" + this.INCH +"'>"+  this.INCH + "</button>";
        }
        target.append(button);
    });
    
    $(document).off("click").on("click",".search-panel .drop-box > button", function(){
        const parent = $(this).parents(".select-box");
        const selectButton = parent.children(".btn");
        // selected value set
        selectButton.attr("value", $(this).attr("value"));
        selectButton.text($(this).text());
        $(this).siblings().removeClass("selected");
        $(this).addClass("selected");
        selectButton.addClass("selected");
        const condition = selectButton.attr("id");
        const value = selectButton.attr("value");
        const text = selectButton.text();
        
        const currentConditionIndex = parent.index();   // 변경된 검색 조건 위치
        
        let conditionCount; // 검색 조건 개수

        if(searchType == TBR_SEARCHTYPE) {
            // 선택된 검색조건 노출
            // refreshOptions();
             conditionCount = $("#truckBus .select-vehicle .select-box").length; 
             removeSelect(searchType, currentConditionIndex+3, CONDITIONS.TBR.length-1);
        }
        else {
            conditionCount = $("#carSub > .select-vehicle").find(".select-box").length;
            // 선택된 depth 아래의 데이터 초기화
            removeSelect(searchType, currentConditionIndex+1, conditionCount-1);
            // 선택된 검색조건 노출
           // $(".options > span").eq(currentConditionIndex).text(text); 
        }
        // parameter setting
        setFormData(condition, value);

        // 다음 검색 조건의 dropbox 생성
        if(currentConditionIndex != (conditionCount-1)) {
            var nextCondition = parent.next().children().attr("id");
            var nextConditionList = getConditionItems(searchType, nextCondition);
            populuateDropBox(searchType, currentConditionIndex+1, nextCondition, nextConditionList);
        }
        
        refreshOptions(searchType,conditionCount);

        // 검색 결과 노출
        if(( searchType == VEHICLE_SEARCHTYPE && currentConditionIndex != 0) 
                || ( searchType == TIRESIZE_SEARCHTYPE && currentConditionIndex == 2 )
                || ( searchType == TBR_SEARCHTYPE && currentConditionIndex == 1) ) {
            populateSearchResult(searchType);
        } else{
            initResult(true);
        }
        
  });    
};

/*
    검색 결과 
*/
function populateSearchResult(searchType) {
    let url = "";
    if (searchType == VEHICLE_SEARCHTYPE)
        url = VEHICLE_URL_PREFIX + "result" + URL_POSTFIX;
    else if (searchType == TIRESIZE_SEARCHTYPE)
        url = TIRESIZE_URL_PREFIX + "result" + URL_POSTFIX;
     else if (searchType == TBR_SEARCHTYPE)
        url = TBR_URL_PREFIX + "result" + URL_POSTFIX;
   else return;
    
   const searchResult = getSearchResult(url);
   $(".select-result .title").html($("#resultCount").html().replace("{0}", searchResult.ResultCount));
   populateHeaderResult(searchResult.ResultList);
   $(".search-panel .view-all").attr("style","display:block");   
    
}
/*
    조건에 맞는 Form input value setting
*/
function setFormData (condition, value) {
    if (condition.toUpperCase() == "BRAND") {
       $("#searchConditions [name='mnfSeq']").val(value);
    }
    else if (condition.toUpperCase() == "MODEL") {
       $("#searchConditions [name='mnfVcleSeq']").val(value);
    }    
    else if (condition.toUpperCase() == "RELEASEYEAR") {
       $("#searchConditions [name='releaseYear']").val(value);
    }    
    else if (condition.toUpperCase() == "MOTOR") {
       $("#searchConditions [name='motor']").val(value);
    }    
    else if (condition.toUpperCase() == "VERSION") {
       $("#searchConditions [name='version']").val(value);
    }    
    else if (condition.toUpperCase() == "SIZE") {
       var sizeArray = value.split('|');
       $("#searchConditions [name='frontSz']").val(sizeArray[0]);
       $("#searchConditions [name='rearSz']").val(sizeArray[1]);
    }    
    else if (condition.toUpperCase() == "SECTWDTH") {
       $("#searchConditions [name='sectWdth']").val(value);
    }    
    else if (condition.toUpperCase() == "FR") {
       $("#searchConditions [name='fr']").val(value);
    }    
    else if (condition.toUpperCase() == "INCH") {
       $("#searchConditions [name='inch']").val(value);
    }    
    else if (condition.toUpperCase() == "SVRTY") {
        if(value != "" && $("#searchConditions [name='svrtyCd']").val() != "") {
            value = $("#searchConditions [name='svrtyCd']").val()+ "," + value;
        }
       $("#searchConditions [name='svrtyCd']").val(value);
    }    
    else if (condition.toUpperCase() == "LOC") {
       $("#searchConditions [name='locCd']").val(value);
    }    
};

/*
    선택된 select 제거
*/
function removeSelect(searchType, startIndex, endIndex){
        let conditions;
        let parent;
        if(searchType == TBR_SEARCHTYPE) {
            conditions = CONDITIONS.TBR;
            if(startIndex == 0) {
                $("#truckBus >.select-tire .btn.active").removeClass("active");
                setFormData( "SVRTY", "");
            } 
            if (startIndex <= 1 && endIndex >= 1) {
                $("#truckBus >.select-wrapper .btn.active").removeClass("active");
                setFormData( "LOC", "");
            }
            parent = $("#truckBus .select-vehicle .select-box");
            startIndex = startIndex -2;
            endIndex = endIndex -2;
        } else {
            if(searchType == VEHICLE_SEARCHTYPE) conditions = CONDITIONS.ByVehicle; 
            else if(searchType == TIRESIZE_SEARCHTYPE) conditions = CONDITIONS.ByTireSize;
            parent = $("#carSub > .select-vehicle .select-box");
        }
        
        for (let i = startIndex ; i <= endIndex ; i++) {
            if(i < 0) continue;
            const target = parent.eq(i).children(".btn");
            target.html(getConditionLabel(conditions, target.attr("id")));
            target.attr("value", "");
            target.removeClass("selected");
            setFormData( target.attr("id"), "");
            populuateDropBox(searchType, i, target.attr("id"), null);
        }
    
}

/*
    서블릿을 통해 검색 결과를 가져온다.
*/
function getSearchResult(url) {
    let searchResult;
    // $.ajax({
    //         type: "POST",
    //         url: url,
    //         data : $("#searchConditions").serialize(),
    //         async: false,
    //         success: function(data) {
    //             if ("0000" == data.resultCode) {
    //                 searchResult = data.data;
    //            }
    //            else {
    //             console.log(data.message);
    //             }
    //         },
    //         error : function(){
    //             console.log('ajax Error');
    //         }
    // });
    return searchResult;
    
}

/*
    Search Type 변경시 검색 조건 동적으로 변경
*/
function changeSearchType(searchType, conditions) {
    $("#searchConditions [name='searchType']").val(searchType);
    // Form 초기화
    //removeOptions(0, $("#carSub > .select-vehicle").find(".select-box").length-1);
    populatePcrConditions(searchType, conditions);
    populateOptions(conditions);
    try{
        window.setSelectBox();
    } catch(error) {console.log(error);}
}

/*
    PCR 검색 조건 그리기
*/
function populatePcrConditions(searchType, conditions) {
    const divCon = $("#carSub > .select-vehicle").children(".con");
    
    // condition 초기화
    let htmlCon = "";
    divCon.html(htmlCon);

    // 검색 조건 추가
    for(let i = 0; i <conditions.length; i++) {
        htmlCon += "<div class='select-box' ";
        if(conditions[i].isRequired != null && conditions[i].isRequired == true)
            htmlCon += " aria-required='true' required";
        htmlCon += "> ";
        if(conditions[i].value != null && conditions[i].value != "") {
            htmlCon += "<button class='btn selected' id='" + conditions[i].condition + "' value='"+ conditions[i].value + "'>";
            htmlCon += conditions[i].text +"</button>";
            setFormData( conditions[i].condition, conditions[i].value);
        }
        else {
            htmlCon += "<button class='btn' id='" + conditions[i].condition + "' value=''>"
            htmlCon += conditions[i].conditionLabel +"</button>";
            setFormData( conditions[i].condition, "");
         }
        htmlCon += "<div class='drop-box'> <button value=''> " + conditions[i].conditionLabel + " </button> </div> </div>";
    }
    divCon.html(htmlCon);
    
}
function populateOptions(conditions) {
    const divOptions = $(".selected-options").children(".options");
    let htmlOptions = "";
    divOptions.html(htmlOptions);
    for(let i = 0; i < conditions.length; i++) {
        if(conditions[i].condition == "Svrty") {
            htmlOptions += "<span>";
            const text = conditions[i].text.replace("[","").replace("]").split(",");
            if(text != null && text !="" && text != "undefined") {
            $.each(text, function(idx, item){
                 htmlOptions += "<p>" + item + "</p>";
            });
            }
            htmlOptions += "</span>";
        }
        else {
            htmlOptions += "<span>" + (conditions[i].text == noChoice ? "" : conditions[i].text ) + "</span>";
        }
    }
    divOptions.html(htmlOptions);
    if(conditions[0].text == null || conditions[0].text == "") {
        $(".selected-options").css("display", "none");
    } else {
        $(".selected-options").css("display", "block");
    }
}
function getConditionLabel(conditions, name) {
    let label = "";
    $.each(conditions, function(idx) {
        if(conditions[idx].condition == name) {
            label = conditions[idx].conditionLabel;
            return false;
        }
    });
   return label;
}
function initResult(isDefault) {
    if( isDefault) {
        // 결과 count 영역 변경
        $(".select-result .title").html($("#defaultTitle4").html());
        // 상품 결과 Default로 변경
        if ($("#searchConditions [name='searchType']").val() == TBR_SEARCHTYPE)
            populateHeaderResult($(".product-list").data("result-list").TBR);
        else 
            populateHeaderResult($(".product-list").data("result-list").PCR);
        $(".search-panel .view-all").attr("style","display:none");
    }
    else {
        const serachString = $(".product-list").data("search-string");
         // 결과 count 영역 변경
        $(".select-result .title").html($("#resultCount").html().replace("{0}", serachString.ResultCount));
        // 상품 결과 Default로 변경
        populateHeaderResult(serachString.ResultList);
        $(".search-panel .view-all").attr("style","display:block");
    }
}
function populateHeaderResult(resultList) {
    const target = $(".product-list");
    let html = ""
    target.html(html);
    $.each(resultList, function(idx, data) {
        html += "<li class='tire-item swiper-slide'><div class='in-nav'>";
        html += populateProduct(data, "");
        html += "</div></li>";
        
  });
    
    target.append(html);
    
}
function populateProduct(data, table, useTag) {

     const searchType = $("#searchConditions [name='searchType']").val();
    useTag = (useTag == null ? true : useTag);
    let html = "<a href='"
    if(data.URL == null) {
        html += "#";
    } else {
        let url = getExternalLink(data.URL);
        if(searchType == TIRESIZE_SEARCHTYPE) {
            url += "?sectWdth=" + $(".options > span:eq(0)").text(); 
            url += "&fr=" + $(".options > span:eq(1)").text(); 
            url += "&inch=" + $(".options > span:eq(2)").text(); 
        }
        else if(searchType == TBR_SEARCHTYPE){
            url += "?sectWdth=" + $(".options > span:eq(2)").text(); 
            url += "&inch=" + $(".options > span:eq(3)").text(); 
        }
        html += url;
    }
    html += "'><div class='v-wrap";
    if(data.OVER_IMG_PATH == null || data.OVER_IMG_PATH == '') 
        html += " no-hover";
    html +=  "'>";
    if(data.LIVE_DATE != null) {
       const s = data.LIVE_DATE.split("-");
       let liveDate = (Number(s[0])+1) + s[1] + s[2];

       var now = new Date();
       var mon = now.getMonth() + 1;
       var date = now.getDate();
       var today = now.getFullYear() + "" + (mon <  10 ? '0' + mon : mon) + "" + (date < 10 ? '0' + date : date);

       if(liveDate > today) {
	   	   var newDefaultIcon = $('[data-newdefaulticon]').data("newdefaulticon");
	   	   var newHoverIcon = $('[data-newhovericon]').data("newhovericon");
		   if(newDefaultIcon || newHoverIcon){
				html += "<span class='badge-new'>New</span>";
		   }else{
				html += "<span class='badge'>New</span>";
		   }
           
       }
    }
    if(data.OVER_IMG_PATH != null && data.OVER_IMG_PATH != '')
        html += "<img src='" + data.OVER_IMG_PATH + "' class='img-hover' alt=''>";
    html += "<img src='" + data.THUMB_IMG_PATH + "' class='img-default' alt=''>";
    html += "<ul class='awards'>";                
    if(data.TEST_RST_YN =="Y") {
        html += "<li class='award'>";
        html += "<img class='award__ico' src='" + testIcon + "' alt=''>";
        html += "<img class='award__light' src='" + testHover + "' alt=''>";
        html += "</li>"; 
    }
    if(data.AWARDS_YN =="Y") {
        html += "<li class='award'>";
        html += "<img class='award__ico' src='" + awardIcon + "' alt=''>";
        html += "<img class='award__light' src='" + awardHover + "' alt=''>";
        html += "</li>"; 
    }
    html += "</ul>";
    if(useTag && table == "TBR") {
        
        
        var wrtTagMenual = "";
        var exWrtTagMenual = "";
        var wrtTagLocation = "";
        var exWrtTagLocation = "";
        
        if(data.TAG_MENUAL){
            let arrTag = data.TAG_MENUAL.split(",");   
            for(var ii = 0; ii < arrTag.length; ii++){
                
                var _key = arrTag[ii].split("@@")[0];
                var _location = arrTag[ii].split("@@")[1];
                var _tagMenual = arrTag[ii].split("@@")[2];
                
                if(_key == "wrt" && _location && _tagMenual){
                    wrtTagMenual = _tagMenual;
                    wrtTagLocation = _location;
                }
                
                if(_key == "ex_wrt" && _location && _tagMenual){
                    exWrtTagMenual = _tagMenual;
                    exWrtTagLocation = _location;
                }
            }
         }  
         
        html += "<div class='tags'>";
        if(data.WRT_YN =="Y") {
            
            if(wrtTagMenual){
                
                if(wrtTagLocation == "b"){
                    html += "<span class='tag-em'>" + wrtTagMenual + $(".search-panel").data("wrt-label") + "</span>"; 
                }else{
                    html += "<span class='tag-em'>" + $(".search-panel").data("wrt-label") + wrtTagMenual + "</span>"; 
                }
            }else{
                html += "<span class='tag-em'>" + $(".search-panel").data("wrt-label") + "</span>"; 
            }
        }   
        
        if(data.EX_WRT_YN == "Y") {
            if(exWrtTagMenual){
                
                if(exWrtTagLocation == "b"){
                    html += "<span class='tag-em'>" + exWrtTagMenual + $(".search-panel").data("exwrt-label") + " </span>";  
                }else{
                    html += "<span class='tag-em'>" + $(".search-panel").data("exwrt-label") + exWrtTagMenual+ " </span>";  
                }
                
            }else{
                html += "<span class='tag-em'>" + $(".search-panel").data("exwrt-label") + " </span>";  
            }
             
        } 
        html += "</div>"; 
    }
    

    html += "</div><div class='tit'>"
    html += "<img src='" + data.PRD_BI_IMG + "' alt=''>";    
    html += "<span>" + data.PRD_NM + "</span></div></a>";    
    html += "<div class='content'>";    
    html += "<p class='font_caption_lg desc'>" + data.PRD_DESC + "</p>";  
    
    if(useTag) {  
        if ($("#searchConditions [name='searchType']").val() == TBR_SEARCHTYPE || table == "TBR")
            html += populateTbrProductTag(data);
        else if (table == "CPC")
            html += populateCpcProductTag(data);
        else 
            html += populatePcrProductTag(data);
    }
          
    html += "</div>";    
    return html;
}
function populatePcrProductTag(data) {
    let html = "<div class='tags'>";  
    html += "<span class='tag'>" + data.SESN_CD_NM + "</span>";   

    if(data.EV != null) {
        html += "<span class='tag'> " + data.EV + " </span>"; 
        
    }             
    
    //html += "<span class='tag'>" + data.PCR_VCLE_TYPE_NM + "</span>"; 
    if(data.ZMS_YN == "Y")    
        html += "<span class='tag'> " + $(".search-panel").data("zms-label") + " </span>";   
    if(data.SNOW_YN == "Y") 
        html += "<span class='tag'>" + $(".search-panel").data("snow-label") + " </span>";   
    if(data.PCR_PFM_TYPES != null && data.PCR_PFM_TYPES != "") {
        const t =data.PCR_PFM_TYPES_NM.split(","); 
        $.each(t, function(ti, tData) {
            if(tData != null) {
                html += "<span class='tag'>" + tData + "</span>";  
            } 
        });
        
    }     
    
    
    
    var milTagMenual = "";
    var roadTagMenual = "";
    var freeTagMenual = "";
    
    var milTagLocation = "";
    var roadTagLocation = "";
    var freeTagLocation = "";
    
    if(data.TAG_MENUAL){
        let arrTag = data.TAG_MENUAL.split(",");   
        for(var ii = 0; ii < arrTag.length; ii++){
            
            var _key = arrTag[ii].split("@@")[0];
            var _location = arrTag[ii].split("@@")[1];
            var _tagMenual = arrTag[ii].split("@@")[2];
            
            if(_key == "mil_wrt" && _location && _tagMenual){
                milTagMenual = _tagMenual;
                milTagLocation = _location;
            }
            
            if(_key == "road_hz" && _location && _tagMenual){
                roadTagMenual = _tagMenual;
                roadTagLocation = _location;
            }
            
            if(_key == "free_trial" && _location && _tagMenual){
                freeTagMenual = _tagMenual;
                freeTagLocation = _location;
            }
        }
     }  
            
    if(data.MIL_WRT_YN == "Y") {
        if(milTagMenual){
            if(milTagLocation == "b"){
                html += "<span class='tag-em'>"+ milTagMenual + $(".search-panel").data("milwrt-label") + " </span>";  
            }else{
                html += "<span class='tag-em'>"+ $(".search-panel").data("milwrt-label") + milTagMenual + " </span>";  
            }
        }else{
            html += "<span class='tag-em'>" + $(".search-panel").data("milwrt-label") + " </span>";  
        }
        
    }
         
    if(data.ROAD_HZ_YN == "Y") {
        if(roadTagMenual){
            if(roadTagLocation == "b"){
                html += "<span class='tag-em'>"+ roadTagMenual + $(".search-panel").data("roadhz-label") + " </span>";  
            }else{
                html += "<span class='tag-em'>"+ $(".search-panel").data("roadhz-label") + roadTagMenual + " </span>";  
            }
            
            html += "<span class='tag-em'>" + $(".search-panel").data("roadhz-label") + " </span>"; 
        }else{
            html += "<span class='tag-em'>" + $(".search-panel").data("roadhz-label") + " </span>"; 
        }
        
    }
          
    if(data.FREE_TRIAL_YN == "Y") {
        if(freeTagMenual){
            if(freeTagLocation == "b"){
                html += "<span class='tag-em'>"+ freeTagMenual + $(".search-panel").data("freetrial-label") + " </span>";  
            }else{
                html += "<span class='tag-em'>"+ $(".search-panel").data("freetrial-label") + freeTagMenual + " </span>";  
            }
        }else{
            html += "<span class='tag-em'>" + $(".search-panel").data("freetrial-label") + " </span>";   
        }
    }
        
    /*  
    if(data.TAG_MENUAL){
        let arrTag = data.TAG_MENUAL.split(",");   
        for(var ii = 0; ii < arrTag.length; ii++){
            html += "<span class='tag-em'>" + arrTag[ii] + "</span>";  
        }
     }    
    */  
        
        
    html += "</div>";    
    return html;
}
function populateTbrProductTag(data) {
    let html = "<div class='tags'>";  
    html += "<span class='tag'>" + data.TBR_SVRTY_NM + "</span>";   
    html += "<span class='tag'>" + data.TBR_LOC_NM + "</span>"; 
    
    if(data.ZMS_YN == "Y"){
        html += "<span class='tag'> " + $(".search-panel").data("zms-label") + " </span>";   
    }
        
    if(data.SNOW_YN == "Y"){
        html += "<span class='tag'>" + $(".search-panel").data("snow-label") + " </span>";   
    }

    /*
    if(data.TAG_MENUAL){
        let arrTag = data.TAG_MENUAL.split(",");
        for(var ii = 0; ii < arrTag.length; ii++){
            html += "<span class='tag'>" + arrTag[ii] + " </span>";   
        }
    }*/



    html += "</div>";    
    return html;
}
function populateCpcProductTag(data) {
    let html = "<div class='tags'>";  
    if(data.PFM_NM != null)
        html += "<span class='tag'>" + data.PFM_NM + "</span>"; 
    if(data.SUB_PFM_NM != null)  
        html += "<span class='tag'>" + data.SUB_PFM_NM + "</span>"; 
    if(data.ZMS_YN == "Y")    
        html += "<span class='tag'> " + $(".search-panel").data("zms-label") + " </span>";   
    if(data.SNOW_YN == "Y") 
        html += "<span class='tag'>" + $(".search-panel").data("snow-label") + " </span>";   
 
    html += "</div>";    
    return html;
}
function getExternalLink(path) {
    if (path != "") {
        if (isPublish == true && path.indexOf("/content/hankooktire") > -1 ) {
          path = path.replace("/content/hankooktire", "");
        }
        if(!path.endsWith(".html")) {
            path += ".html";
        }
    } 
    return path;
}