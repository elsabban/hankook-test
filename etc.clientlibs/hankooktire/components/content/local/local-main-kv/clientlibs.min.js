/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
(() => {

;// CONCATENATED MODULE: ./src/etc.clientlibs/hankooktire/clientlibs/clientlib-base/js/module/util.js
/* harmony default export */ const util = ({
  /**
   * 윈도우 리사이징 시 특정 조건에 의해 함수 실행
   * @author: Jake Lee
   * @param {String} namespace - resize 이벤트 namespace
   * @param {Function} cond - 조건을 판별할 함수
   * @param {Function} callback - resizing 중 조건이 변경되었을 때, 실행할 함수
   */
   switchedResize: function(namespace, cond, callback) {
    let state = cond(); // 현재 결과

    /**
     * resizing 중 조건 판단
     */
    function chkBreakpoint() {
      let result = cond();

      if (result !== state) {
        state = result;
        // console.log('[switchLayout] layout switched.', namespace, state);
        callback(state);
      }
    }

    // [TODO] namespace
    window.addEventListener('resize', function() {
      chkBreakpoint.call(null, state);
    });

    // 최초 실행
    callback(state);
  },

  getSiblings: function (e) {
    // for collecting siblings
    let siblings = []; 
    // if no parent, return no sibling
    if(!e.parentNode) {
        return siblings;
    }
    // first child of the parent node
    let sibling  = e.parentNode.firstChild;
    
    // collecting siblings
    while (sibling) {
      if (sibling.nodeType === 1 && sibling !== e) {
          siblings.push(sibling);
      }
      sibling = sibling.nextSibling;
    }
    return siblings;
  },

});
;// CONCATENATED MODULE: external "Swiper"
const external_Swiper_namespaceObject = Swiper;
var external_Swiper_default = /*#__PURE__*/__webpack_require__.n(external_Swiper_namespaceObject);
;// CONCATENATED MODULE: ./src/components/local/local-main-kv/clientlibs/js/main.js
function main() {
    external_Swiper_default().use([external_Swiper_namespaceObject.Navigation, external_Swiper_namespaceObject.Pagination]);

    let endEventElem
    let endEventElemPrev
    let endTimeout
    const endEvent = function(){
        swiper.slideNext()
    }
    const swiper = new (external_Swiper_default())('.lmk__swiper', {
        slidesPerView: 1,
        pagination: {
            el: '.swiper-pagination',
            clickable: true,
        },
        loop: true,
        on: {
            slideChangeTransitionStart: function(){
                const targetSlide = $('.lmk__swiper .swiper-slide:nth-of-type('+(this.activeIndex + 1)+')')

                endEventElem = targetSlide.find('video')
                clearTimeout(endTimeout)

                if(endEventElem.length){
                    endEventElemPrev && endEventElemPrev.off('ended', endEvent)
                    endEventElem.currentFrame = 0;
                    endEventElem[0] && endEventElem[0].play()
                    endEventElem.on('ended', endEvent)
                    endEventElemPrev = endEventElem
                }else{
                    endTimeout = setTimeout(function(){
                        swiper.slideNext()
                    }, 4000)
                }
            }
        }
    });

    window.addEventListener('resize', resizeHandler)

    resizeHandler()
    function resizeHandler(){
        // document.querySelector('.pop_select .pop_inner').style.top = window.innerHeight - 14 + 'px'
    }

    const $conditionSwitch = document.querySelector('.lmk__condition-panel');
    const $findBtn = document.querySelector('.lmk__condition-panel .find-btn');
    const $searchTabBtns = document.querySelectorAll('.search-tab > button');
    const $searchTabContents = document.querySelectorAll('.search-tab-con');
    const $searchPanel = document.querySelector('.search-panel');
    
    const headerHeight = document.getElementById('header').offsetHeight;
    document.documentElement.style.setProperty('--mobile-cover-height-except-header', (window.innerHeight - headerHeight) +'px');
    
    if($conditionSwitch) {
        $conditionSwitch.querySelectorAll('.switch').forEach(btn => {
            btn.addEventListener('click', function() {
                $conditionSwitch.setAttribute('data-switch', this.getAttribute('data-type'));

                switch(this.dataset.type){
                    case 'truck':
                        $findBtn.dataset.target = 'truckBus';
                        break;
                    default:
                        $findBtn.dataset.target = 'carSub';
                        break;
                }
            })
        })
    }

    $findBtn.addEventListener('click', function(){
        window.disableBodyScroll($searchPanel.querySelector('.search-content'));
        const targetId = this.dataset.target;

        $searchTabContents.forEach(el => {
            el.classList.remove('active');
        });

        document.getElementById(targetId).classList.add('active');

        $searchPanel.classList.remove('hide');
    })

    $searchTabBtns.forEach(el => {
        el.addEventListener('click', function(e){
            $searchTabBtns.forEach(el => {
                el.classList.remove('active');
            });
            $searchTabContents.forEach(el => {
                el.classList.remove('active');
            })

            this.classList.add('active');
            document.getElementById(el.dataset.type).classList.add('active');

            e.preventDefault();
            e.stopPropagation();
        });
    });

    // document.querySelectorAll('#select_search_type .pop_select_btn').forEach(el => {
    //     el.addEventListener('click', function(){
    //         console.log(this.dataset.type)
    //
    //         $findBtn.dataset.target = this.dataset.type;
    //     })
    // })
}
window.addEventListener('compFuncRun', main);
})();

// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
(() => {
// extracted by mini-css-extract-plugin

})();

/******/ })()
;
$(document).ready(function(){
    //By Vehicle click
    $(".d_byVehicle").on("click", function(){
        $(".search-panel").removeClass( 'hide' );
        
        $('#tabPcr').click();
        $('#byVehicle').click();
    });
   
    //By Tire Size click
    $(".d_byTireSize").on("click", function(){
        $(".search-panel").removeClass( 'hide' );
        $('#tabPcr').click();

        $('#byTireSize').click();
    });
   
    //Truck Tire click
    $(".d_truckTire").on("click", function(){
        $(".search-panel").removeClass( 'hide' );
        $('#tabTbr').click();
    });
   
    //Mobile Select(By Vehicle, By Tire Size) click 
    $(".d_showFind").on("click", function(){
        if($(this).data("target") == 'truckBus'){
            $(".search-panel").removeClass( 'hide' );
            $('#tabTbr').click();
        }else{
            var select = $('.pop_select_btn').closest('.active').data('type');
            if(select == 'vehicle'){
                $('#byVehicle').click();            
            }else{
                $('#byTireSize').click();
            }
        }
    });

});


