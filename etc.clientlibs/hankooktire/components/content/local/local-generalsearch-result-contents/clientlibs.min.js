/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
(() => {
function main(){
  const tabButton = document.querySelectorAll('.lgrc .tab-inner button');
  const detailList = document.querySelectorAll('.lgrc .search-result-detail-wrap .result-detail');
  tabButton.forEach((el) => {
      el.addEventListener('click',(event)=>{
        const dataKey = event.target.dataset.keywords;
        tabChange(dataKey)
    })
  })


  function tabChange(dataKey){
    tabButton.forEach((el)=>{
        el.classList.remove('active')
        if(el.dataset.keywords === dataKey){
            el.classList.add('active')
        }
    })
        detailList.forEach((el) =>{
            el.classList.add('hidden')
            if(el.dataset.keywords === dataKey){
                el.classList.remove('hidden')
            }
        })
      noData();
        window.locomotive && window.locomotive.update()
    }


    function noData(){
      const visibleWrap = document.querySelector('.result-detail:not(.hidden)');
      console.log(visibleWrap)
      const NumOfVisibleData = visibleWrap.querySelectorAll('.result-item').length;
      console.log(NumOfVisibleData)
      if(NumOfVisibleData <= 0){
          visibleWrap.querySelector('.paging-box').classList.add('hidden')
          document.querySelector('.no_data').classList.remove('hidden')
        } else{
          visibleWrap.querySelector('.paging-box').classList.remove('hidden')
          document.querySelector('.no_data').classList.add('hidden')
        }
    }


    noData();

  }
window.addEventListener('compFuncRun', main);
})();

// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
// extracted by mini-css-extract-plugin

})();

/******/ })()
;
/**
 * 
 */
const LGRC_PAGE_BLOCK = 5;
$(document).ready(function(){
    changeTab("general");
    
    $(".lgrc .tab-inner button").on("click", function(){
        changeTab($(this).data("collection"));
        window.locomotive.scrollTo(0) && window.locomotive.update();
    });

   $(".lgrc .search-recommend-list a.recomment-list").on("click", function(){
        location.href = location.href.substring(0, location.href.indexOf("?") +1) + "keyword=" + $(this).text();
   });
   
   $(".lgrc .btn--search").on("click", function(){
        location.href = location.href.substring(0, location.href.indexOf("?") +1) + "keyword=" +  $("#searchForm > input[name='keyword']").val();
        return false;
   });

    $(".decrease-end").on("click", function(){
        const target = $(this).closest(".result-detail");
        goPage(1,target);
        window.locomotive.scrollTo(0) && window.locomotive.update();
    });

    $(".decrease-by1").on("click", function(){
        const target = $(this).closest(".result-detail");
        goPage(eval(target.find(".page-num.is-active").children("span").text()) - 1, target);
        window.locomotive.scrollTo(0) && window.locomotive.update();
    });

    $(".increase-by1").on("click", function(){
        const target = $(this).closest(".result-detail");
        goPage(eval(target.find(".page-num.is-active").children("span").text()) + 1, target);
        window.locomotive.scrollTo(0) && window.locomotive.update();
    });

    $(".increase-end").on("click", function(){
        const target = $(this).closest(".result-detail");
        goPage(target.children(".paging-box").data("totalpage"), target);
        window.locomotive.scrollTo(0) && window.locomotive.update();
    });

});
function changeTab(collection) {
        $("#searchForm > input[name='collection']").val(collection);
        $("#searchForm > input[name='page']").val(1);
        const items = getSearchItems();
        if(collection == "general") 
            populateGeneralItems(items);
        else if(collection == "product")
            populateProductItems(items);
}
function getSearchItems() {
    console.log($("#searchForm").serialize());
    // const url = "/wsvc/api/localSearch.do";
    let items;
    // $.ajax({
    //         type: "POST",
    //         url: url,
    //         data : $("#searchForm").serialize(),
    //         async: false,
    //         success: function(data) {
    //             // returnCode logic 
    //             if ("0000" == data.resultCode) {
    //                 items = eval("data.data."+$("#searchForm > input[name='collection']").val());
    //            }
    //            else {
    //             alert(data.message);
    //             }
    //         },
    //         error : function(){
    //             alert('ajax Error');
    //         }
    // });
   return items;
};
function populateGeneralItems(items) {
    const target = $("#resultGeneral > .row-list");
    let html = "";
    target.html(html);
    $(items.Result).each(function() {
        html = "";
        html += "<div class='item result-item'>";
        html += "<a href='"+ this.URL + "'>";
        html += "<h4 class='font_body_1_main'>"+ this.SUBJECT + "</h4>";
        html += "<p class='font_body_3_main'>" + this.CONTENT + "</p>";
        html += "</div>";
        target.append(html);
    });
    
    populatePage($("#resultGeneral"), items.totalPage);
};
function populateProductItems(items) {
    console.log(items)
    const target = $("#resultProduct > .flex-list");
    let html = "";
    target.html(html);
   $(items.Result).each(function() {
        html = "";
        html += "<li class='tire-item result-item'>";
        html += populateProduct(this, this.TYPE);
        html += "</div>";
        target.append(html);
    });
    
    const cnt = $('.flex-list .tire-item').length;
    if(cnt == 0) $('.flex-list').addClass('hidden');
   populatePage($("#resultProduct"), items.totalPage);
};
function populatePage(target, totalPage) {
    console.log("populatePage...................")
    target.children(".paging-box").data("totalpage", totalPage);
    target.find(".page-num").remove();
    const page = $("#searchForm > input[name='page']").val();
    const curBlk = Math.ceil(page/LGRC_PAGE_BLOCK);
    const startPg = (curBlk -1) * LGRC_PAGE_BLOCK + 1;
    let endPg = (curBlk ) * LGRC_PAGE_BLOCK;
    if(endPg > totalPage) endPg =  totalPage;
    for(let i = startPg ; i <= endPg  ; i++) {
        target.find(".increase-by1").before("<a href='#' class='page-num'><span>" + i + "</span></a>");
    }
    
    applyPageStyle(target, startPg, endPg, curBlk, totalPage);
    $(".page-num").on("click", function(){
         goPage($(this).children("span").text(), target, totalPage);
        window.locomotive.scrollTo(0)
    });
}
function applyPageStyle(target, startPg, endPg, curBlk, totalPage){
    const page = $("#searchForm > input[name='page']").val();
    for(let i = startPg ; i <= endPg ; i++) {
        const index = i-(curBlk-1)*LGRC_PAGE_BLOCK -1;
        if(i == page) {
            target.find(".page-num").eq(index).addClass("is-active");
        }
        else {
            target.find(".page-num").eq(index).removeClass("is-active");
        }
        
        if (i == endPg) {
            target.find(".page-num").eq(index).addClass("last-num");
        }
    }
    if(totalPage == 1) {
        target.find(".decrease-end").addClass("disabled");
        target.find(".decrease-by1").addClass("disabled");
        target.find(".increase-by1").addClass("disabled");
        target.find(".increase-end").addClass("disabled");
    }
    else if (page == 1) {
        target.find(".decrease-end").addClass("disabled");
        target.find(".decrease-by1").addClass("disabled");
        target.find(".increase-by1").removeClass("disabled");
        target.find(".increase-end").removeClass("disabled");
   } else if (page == totalPage) {
        target.find(".decrease-end").removeClass("disabled");
        target.find(".decrease-by1").removeClass("disabled");
        target.find(".increase-by1").addClass("disabled");
        target.find(".increase-end").addClass("disabled");
    }
    else {
        target.find(".decrease-end").removeClass("disabled");
        target.find(".decrease-by1").removeClass("disabled");
        target.find(".increase-by1").removeClass("disabled");
        target.find(".increase-end").removeClass("disabled");
     }    
}
function goPage(page, target, totalPage) {
    if(page == $("#searchForm > input[name='page']").val()) 
        return false;
    $("#searchForm > input[name='page']").val(page);
    const items = getSearchItems();
    const collection = target.data("collection");
    if(collection == "general") 
        populateGeneralItems(items);
    else if(collection == "product")
        populateProductItems(items);
}
