/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
(() => {
function main() {


    //변수 선언
    const popTabBtns = document.querySelectorAll(".pop_tab .btn-tab");
    const popTabConts = document.querySelectorAll(".pop_tabconts_wrapper .pop_tabconts");
    const $iframeTable = document.querySelector('#psJobWidget');

    console.log(popTabBtns, popTabConts);
    //이벤트 바인딩
    popTabBtns.forEach((data, index, self)=>{
        data.addEventListener("click", (e)=>{
            e.preventDefault();   
            console.log(e, data, index, popTabConts);
            activeTab(e, self);
            changeTabCons(index, popTabConts);
        });
    });

    //함수 정의
    function activeTab(target, el){
        
        for(let i = 0; i<el.length; i++){
            el[i].classList.remove("active");
        }
        target.currentTarget.classList.add("active");        
    }

    function changeTabCons(index, el){
        for(let i =0; i<el.length; i++){
            el[i].classList.remove("active");
        }
        el[index].classList.add("active");
    }

    const keyVisuals = gsap.utils.toArray('.lsk');

    // DE IFrame 오류 분기. 
        if(!$iframeTable){
            gsap.registerPlugin(ScrollTrigger);
            ScrollTrigger.scrollerProxy("[data-scroll-container]", {
                scrollTop(value) {
                    return arguments.length ? window.locomotive.scrollTo(value, 0, 0) : window.locomotive.scroll.instance.scroll.y;
                },
                getBoundingClientRect() {
                    return { top: 0, left: 0, width: window.innerWidth, height: window.innerHeight };
                },
                pinType: document.querySelector("[data-scroll-container]").style.transform ? "transform" : "fixed"
            });
            
            ScrollTrigger.addEventListener("refresh", () => window.locomotive.update());
            ScrollTrigger.refresh();
            
            window.locomotive.on('scroll', (args) => {
                ScrollTrigger.update()
            });


            keyVisuals.forEach((el) => {
                const thisKvItem = el.querySelector('.img-wrap');
                gsap.to(thisKvItem,{
                    scale : '1.1',
                    backgroundPosition : '50% 50%',
                    scrollTrigger: {
                        trigger : el,
                        start : 'top top',
                        end : 'bottom top',
                        scrub : 1,
                        scroller:"[data-scroll-container]",
                    },
                });
    
        })
        } else {
            keyVisuals.forEach((el) => {
                const thisKvItem = el.querySelector('.img-wrap');
                gsap.to(thisKvItem,{
                    scale : '1.1',
                    backgroundPosition : '50% 50%',
                    scrollTrigger: {
                        trigger : el,
                        start : 'top top',
                        end : 'bottom top',
                        scrub : 1,
                        
                    },
                });
    
        })
        }











}
window.addEventListener('compFuncRun', main);
})();

// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
// extracted by mini-css-extract-plugin

})();

/******/ })()
;